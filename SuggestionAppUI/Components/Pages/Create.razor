@page "/Create"
@using SuggestionAppUI.Models
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject IUserData userData
@rendermode InteractiveServer


<h1>Make a Suggsetion</h1>
<div>
    <div>
        <div>
            <button onclick="ClosePage"></button>
        </div>
        @if(categories is not null)
        {
            <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div>
                    <label for="suggestion-text">Suggestion</label>
                    <div>Mention the book and how it inspired you</div>
                    <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"/>
                </div>
                <div>
                    <label for="category">Category</label>
                    <div>Choose one category</div>
                    <div>
                        <CustomInputRadioGroup id="category" @bind-Value= "suggestion.CategoryId">
                            @foreach(var c in categories)
                            {
                                <div>
                                    <InputRadio Value="@c.Id" id="@c.Id"></InputRadio>
                                    <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                                </div>
                            }
                        </CustomInputRadioGroup>
                    </div>
                </div>

                <div>
                    <label for="description">Description</label>
                    <div>Briefly describe your suggestion</div>
                    <InputText id="description" @bind-Value="suggestion.Description" />
                </div>
                <button type="submit">Suggest</button>

                <div>
                    
                </div>

            </EditForm>
        }
    </div>
</div>
@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        //TODO - Replace with user lookup
        loggedInUser = await userData.GetUserFromAuthentication("1234");
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    /// <summary>
    /// Translating the CreateSuggestionModel to a SuggestionModel
    /// </summary>
    /// <returns></returns>
    private async Task CreateSuggestion()
    {
        SuggestionModel s = new();
        s.Suggestion = suggestion.Suggestion;
        s.Description = suggestion.Description;
        s.Author = new BasicUserModel(loggedInUser);
        s.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();
        //if no entry is found
        if(s.Category is null)
        {
            suggestion.CategoryId = "";
            return;
        }
        await suggestionData.CreateSuggestion(s);
        //re-institiating the suggestion just in case
        suggestion = new();
        ClosePage();
    }
}
