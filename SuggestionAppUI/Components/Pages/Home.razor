@page "/"
@inject ICategoryData CategoryData
@inject IUserData UserData
@inject IStatusData StatusData
@inject ISuggestionData SuggestionData
@inject NavigationManager NavigationManager // This is used to redirect to another page
@inject ProtectedSessionStorage ProtectedSessionStorage // This is used to store the user's preferred filters
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer

<h1 class="page-heading text-uppercase mb-4">Content Review Suggestions</h1>
<div class="suggestion-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="suggestion-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @sortedByNewClass(true)" @onclick="(()=> OrderByNew(true))">New</button>
        <button class="btn btn-order @sortedByNewClass(false)"  @onclick="(()=> OrderByNew(false))">Popular</button>
    </div>

    <div class="col-md-4 col-xl-3 search-box">
        
        @*OnSearchInput will be called everytime a character is typed*@
        <input type="text" placeholder="Search" aria-label="Search box" class="form-control rounded-control" @oninput="((txt)=> OnSearchInput((string)txt.Value))"/>
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @*Virtualize is blazor keyword to avoid paging. it allows infinte scrolling but renders only the data visible on the page.
        Context for the variable name. OverscanCount for the extra elements to be renderd*@
        @if(suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
            <div class="suggestion-entry">
                <div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
                    <div class="text-uppercase">@GetUpvoteTopText(s)</div>
                        <span class="fas fa-caret-up entry-upvote"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(s)</div>
                </div>
                <div class="suggestion-entry-class">
                    <div class="suggestion-entry-text-title" @onclick="(()=> OpenDetails(s))">@s.Suggestion</div>
                    <div>
                        <div class="suggestion-entry-text-category" @onclick="(()=> OpenDetails(s))">@s.Category?.CategoryName</div>
                    </div>
                </div>
                <div class="suggestion-entry-status" @GetSuggestionStatusClass(s)>
                    <div class="suggestion-entry-status-text">@s.SuggestionStatus?.StatusName</div>
                </div>
            </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="@GetSelectedCategory()" @onclick="(()=> OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(()=> OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if(statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="@GetSelectedStatus()" @onclick="(()=> OnCategoryClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div class="@GetSelectedStatus(s.StatusName)" @onclick="(()=> OnCategoryClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>
